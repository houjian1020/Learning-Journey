<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/rabbit
       http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">
    <!--加载配置文件-->
    <context:property-placeholder location="classpath:rabbitmq.properties"/>

    <!-- 定义rabbitmq connectionFactory -->
    <rabbit:connection-factory id="connectionFactory" host="${rabbitmq.host}"
                               port="${rabbitmq.port}"
                               username="${rabbitmq.username}"
                               password="${rabbitmq.password}"
                               virtual-host="${rabbitmq.virtual-host}"/>
    <!--定义管理交换机、队列-->
    <rabbit:admin connection-factory="connectionFactory"/>

    <!--定义持久化队列，不存在则自动创建；不绑定到交换机则绑定到默认交换机
    默认交换机类型为direct，名字为：""，路由键为队列的名称
    -->
    <!--
        id：bean的名称
        name：queue的名称
        auto-declare:自动创建
        auto-delete:自动删除。 最后一个消费者和该队列断开连接后，自动删除队列
        exclusive:是否独占
        durable：是否持久化
    -->
    <!--
        1. 简单模式 HelloWorld：一个生产者、一个消费者，不需要设置交换机（使用默认的交换机）。
        2. 工作队列模式 Work Queue：一个生产者、多个消费者（竞争关系），不需要设置交换机（使用默认的交换机）。
        3. 发布订阅模式 Publish/subscribe：需要设置类型为 fanout 的交换机，并且交换机和队列进行绑定，当发送消息到交换机后，交换机会将消息发送到绑定的队列。
        4. 路由模式 Routing：需要设置类型为 direct 的交换机，交换机和队列进行绑定，并且指定 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。
        5. 通配符模式 Topic：需要设置类型为 topic 的交换机，交换机和队列进行绑定，并且指定通配符方式的 routing key，当发送消息到交换机后，交换机会根据 routing key 将消息发送到对应的队列。
    -->
    <!--1.简单模式 HelloWorld-->
    <rabbit:queue id="spring_hello_word" name="spring_hello_word" auto-declare="true"/>

    <!--2.工作队列模式 Work Queue-->
    <rabbit:queue id="spring_work_queue" name="spring_work_queue" auto-declare="true"/>

    <!--3. 发布订阅模式 Publish/subscribe,广播；所有队列都能收到消息-->
    <!--定义广播交换机中的持久化队列，不存在则自动创建-->
    <rabbit:queue id="spring_pus_sub_fanout_queue_1" name="spring_pus_sub_fanout_queue_1" auto-declare="true"/>
    <rabbit:queue id="spring_pus_sub_fanout_queue_2" name="spring_pus_sub_fanout_queue_2" auto-declare="true"/>
    <!--定义广播类型交换机；并绑定上述两个队列-->
    <rabbit:fanout-exchange id="spring_pub_sub_fanout_exchange" name="spring_pub_sub_fanout_exchange"  auto-declare="true">
        <rabbit:bindings>
            <rabbit:binding  queue="spring_pus_sub_fanout_queue_1" />
            <rabbit:binding queue="spring_pus_sub_fanout_queue_2"/>
        </rabbit:bindings>
    </rabbit:fanout-exchange>

    <!--4.路由模式 Routing-->
    <!--定义路由交换机中的持久化队列-->
    <rabbit:queue id="spring_routing_direct_queue_1" name="spring_routing_direct_queue_1" auto-declare="true"/>
    <rabbit:queue id="spring_routing_direct_queue_2" name="spring_routing_direct_queue_2" auto-declare="true"/>
    <!--定义路由类型交换机；并绑定上述两个队列-->
    <rabbit:direct-exchange id="spring_routing_direct_exchange" name="spring_routing_direct_exchange" auto-declare="true">
        <rabbit:bindings>
            <!--direct 类型的交换机绑定队列  key ：路由key  queue：队列名称-->
            <!-- 队列1绑定 info  error  warning,需要打印控制台-->
            <rabbit:binding queue="spring_routing_direct_queue_1" key="info"></rabbit:binding>
            <rabbit:binding queue="spring_routing_direct_queue_1" key="error"></rabbit:binding>
            <rabbit:binding queue="spring_routing_direct_queue_1" key="warning"></rabbit:binding>
            <!-- 队列2绑定  error，需要保存数据库-->
            <rabbit:binding queue="spring_routing_direct_queue_2" key="error"></rabbit:binding>
        </rabbit:bindings>
    </rabbit:direct-exchange>

    <!--5.通配符；*匹配一个单词，#匹配多个单词-->
    <!--定义通配符交换机中的持久化队列-->
    <rabbit:queue id="spring_topic_queue_order" name="spring_topic_queue_order"  auto-declare="true"/>
    <rabbit:queue id="spring_topic_queue_good" name="spring_topic_queue_good" auto-declare="true"/>
    <rabbit:queue id="spring_topic_queue_car" name="spring_topic_queue_car" auto-declare="true"/>
    <!-- <rabbit:queue id="spring_topic_queue_all" name="spring_topic_queue_car" auto-declare="true"/>-->
    <!--定义通配符类型交换机；并绑定上述四个队列-->
    <rabbit:topic-exchange id="spring_topic_exchange"  name="spring_topic_exchange" auto-declare="true">
        <rabbit:bindings>
            <!--队列1：订单日志输出-->
            <rabbit:binding pattern="order.*"  queue="spring_topic_queue_order"/>
            <!--队列2：商品日志输出-->
            <rabbit:binding pattern="good.*" queue="spring_topic_queue_good"/>
            <!--队列3：购物车日志输出-->
            <rabbit:binding pattern="car.#" queue="spring_topic_queue_car"/>
            <!--队列4：所有日志输出-->
            <!--<rabbit:binding pattern="*.*" queue="spring_topic_queue_all"/>-->
        </rabbit:bindings>
    </rabbit:topic-exchange>


    <!--定义rabbitTemplate对象操作可以在代码中方便发送消息-->
    <rabbit:template id="rabbitTemplate" connection-factory="connectionFactory"/>

    <!-- ================================================消费端配置========================================= -->

    <!--1.简单模式 HelloWorld-->
    <bean id="springQueueListener" class="com.springboot.demo.rabbitmq.consumer.spring.HelloWorldListener"/>

    <!--2.工作队列模式 Work Queue-->
    <bean id="workQueueListenerOne" class="com.springboot.demo.rabbitmq.consumer.spring.WorkQueueListenerOne"/>
    <bean id="workQueueListenerTwo" class="com.springboot.demo.rabbitmq.consumer.spring.WorkQueueListenerTwo"/>

    <!--3. 发布订阅模式 Publish/subscribe,广播；所有队列都能收到消息-->
    <bean id="pubSubFanoutListenerOne" class="com.springboot.demo.rabbitmq.consumer.spring.PubSubFanoutListenerOne"/>
    <bean id="pubSubFanoutListenerTwo" class="com.springboot.demo.rabbitmq.consumer.spring.PubSubFanoutListenerTwo"/>

    <!--4.路由模式 Routing-->
    <bean id="routingDirectListenerOne" class="com.springboot.demo.rabbitmq.consumer.spring.RoutingDirectListenerOne"/>
    <bean id="routingDirectListenerTwo" class="com.springboot.demo.rabbitmq.consumer.spring.RoutingDirectListenerTwo"/>

    <!--5.通配符；*匹配一个单词，#匹配多个单词-->
    <bean id="topicListenerOne" class="com.springboot.demo.rabbitmq.consumer.spring.TopicListenerOne"/>
    <bean id="topicListenerTwo" class="com.springboot.demo.rabbitmq.consumer.spring.TopicListenerTwo"/>
    <bean id="topicListenerThree" class="com.springboot.demo.rabbitmq.consumer.spring.TopicListenerThree"/>
    <!-- <bean id="topicListenerFour" class="com.nanfeng.TopicListenerFour"/>-->

    <rabbit:listener-container connection-factory="connectionFactory" auto-declare="true">
        <!-- 1.简单模式 HelloWorld-->
        <rabbit:listener ref="springQueueListener" queue-names="spring_hello_word"/>

        <!--2.工作队列模式 Work Queue-->
        <rabbit:listener ref="workQueueListenerOne" queue-names="spring_work_queue"/>
        <rabbit:listener ref="workQueueListenerTwo" queue-names="spring_work_queue"/>

        <!-- 3. 发布订阅模式 Publish/subscribe,广播；所有队列都能收到消息-->
        <rabbit:listener ref="pubSubFanoutListenerOne" queue-names="spring_pus_sub_fanout_queue_1"/>
        <rabbit:listener ref="pubSubFanoutListenerTwo" queue-names="spring_pus_sub_fanout_queue_2"/>

        <!--4.路由模式 Routing-->
        <rabbit:listener ref="routingDirectListenerOne" queue-names="spring_routing_direct_queue_1"/>
        <rabbit:listener ref="routingDirectListenerTwo" queue-names="spring_routing_direct_queue_2"/>

        <!--5.通配符；*匹配一个单词，#匹配多个单词-->
        <rabbit:listener ref="topicListenerOne" queue-names="spring_topic_queue_order"/>
        <rabbit:listener ref="topicListenerTwo" queue-names="spring_topic_queue_good"/>
        <rabbit:listener ref="topicListenerThree" queue-names="spring_topic_queue_car"/>
        <!--<rabbit:listener ref="topicListenerFour" queue-names="spring_topic_queue_all"/>-->
    </rabbit:listener-container>

</beans>
